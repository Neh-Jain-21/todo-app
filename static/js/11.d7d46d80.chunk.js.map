{"version":3,"sources":["components/Tabs/components/Todo.js","components/Tabs/components/Alltab.js","components/Tabs/components/Activetab.js","components/Tabs/components/Completedtab.js","components/Tabs/index.js","actions/index.js"],"names":["Todo","todo","useState","open","setOpen","showImage","setShowImage","text","editedText","setEditedText","dispatch","useDispatch","darkMode","useSelector","state","themeReducer","classes","makeStyles","root","marginBottom","border","padding","backgroundColor","color","container","display","flexDirection","alignItems","todoText","fontSize","check","dialog","inputField","borderBottomColor","borderColor","imageContainer","justifyContent","objectFit","image","maxHeight","maxWidth","useStyles","Paper","elevation","className","Grid","direction","Checkbox","value","completed","checked","onClick","batch","completeTodo","id","completeSnack","activeSnack","PhotoCamera","edge","Edit","IconButton","deleteTodo","deleteSnack","Delete","Modal","onClose","src","alt","Dialog","keepMounted","DialogTitle","DialogContent","TextField","fullWidth","onChange","e","target","label","variant","DialogActions","Button","temp","trim","length","editTodo","Alltab","todos","sort","setSort","setImage","inputValue","setInputValue","theme","paddingTop","paddingLeft","paddingRight","input","flexWrap","todoList","inputButton","marginRight","todoContainer","marginTop","breakpoints","down","accept","inputImage","type","undefined","files","URL","createObjectURL","htmlFor","component","addTodo","Tooltip","title","arrow","size","Sort","reverse","map","empty","Activetab","Completedtab","TabPanel","props","children","index","other","role","hidden","Box","Index","handleCloseSearch","openSearch","setValue","search","setSearch","todoReducer","flexGrow","borderRadius","tab","Tabs","event","newValue","centered","indicatorColor","tabs","Tab","scroll","dividers","DialogContentText","tabIndex","toLowerCase","changeTheme","payload","data"],"mappings":"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","file":"static/js/11.d7d46d80.chunk.js","sourcesContent":["/** @format */\n\nimport React, { useState } from \"react\";\nimport { batch, useDispatch, useSelector } from \"react-redux\";\nimport {\n    Checkbox,\n    Grid,\n    IconButton,\n    Paper,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Dialog,\n    Button,\n    TextField,\n    makeStyles,\n    Modal,\n} from \"@material-ui/core\";\n//actions\nimport {\n    completeTodo,\n    deleteTodo,\n    editTodo,\n    deleteSnack,\n    completeSnack,\n    activeSnack,\n} from \"../../../actions\";\n//icons\nimport { Delete, Edit, PhotoCamera } from \"@material-ui/icons\";\n\nconst Todo = ({ todo }) => {\n    //states\n    const [open, setOpen] = useState(false);\n    const [showImage, setShowImage] = useState(false);\n    const [editedText, setEditedText] = useState(todo.text);\n\n    //data from store\n    const dispatch = useDispatch();\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n\n    //dynamci styles\n    const useStyles = makeStyles(() => ({\n        root: {\n            marginBottom: 10,\n            border: darkMode ? \"\" : \"0.4px solid lightgray\",\n            padding: 10,\n            backgroundColor: darkMode ? \"#292929\" : \"\",\n            color: darkMode ? \"white\" : \"\",\n        },\n        container: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n        },\n        todoText: {\n            fontSize: 16,\n        },\n        check: {\n            color: darkMode ? \"white\" : \"\",\n        },\n        dialog: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            color: darkMode ? \"white\" : \"\",\n        },\n        inputField: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            \"& label.Mui-focused\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInput-underline:after\": {\n                borderBottomColor: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiOutlinedInput-root\": {\n                \"& fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&:hover fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&.Mui-focused fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n            },\n            \"& .MuiInputLabel-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInputBase-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n        },\n        imageContainer: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            objectFit: \"contain\",\n        },\n        image: {\n            maxHeight: \"90vh\",\n            maxWidth: \"90vw\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Paper elevation={0} className={classes.root}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                >\n                    <div className={classes.container}>\n                        <Checkbox\n                            className={classes.check}\n                            color=\"primary\"\n                            value={todo.completed}\n                            checked={todo.completed}\n                            onClick={() => {\n                                if (todo.completed === false) {\n                                    batch(() => {\n                                        dispatch(completeTodo(todo.id));\n                                        dispatch(completeSnack(true));\n                                    });\n                                } else {\n                                    batch(() => {\n                                        dispatch(completeTodo(todo.id));\n                                        dispatch(activeSnack(true));\n                                    });\n                                }\n                            }}\n                        />\n                        <p className={classes.todoText}>\n                            {todo.completed ? (\n                                <del>{todo.text}</del>\n                            ) : (\n                                todo.text\n                            )}\n                        </p>\n                    </div>\n                    <div className={classes.container}>\n                        {todo.image !== \"\" ? (\n                            <PhotoCamera\n                                edge=\"start\"\n                                color=\"inherit\"\n                                onClick={() => {\n                                    setShowImage(true);\n                                }}\n                                fontSize=\"medium\"\n                            >\n                                <Edit fontSize=\"small\" />\n                            </PhotoCamera>\n                        ) : null}\n\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                setOpen(true);\n                            }}\n                        >\n                            <Edit fontSize=\"small\" />\n                        </IconButton>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                batch(() => {\n                                    dispatch(deleteTodo(todo.id));\n                                    dispatch(deleteSnack(true));\n                                });\n                            }}\n                        >\n                            <Delete color=\"secondary\" fontSize=\"small\" />\n                        </IconButton>\n                    </div>\n                </Grid>\n            </Paper>\n\n            {/* Image Modal */}\n            <Modal\n                open={showImage}\n                onClose={() => {\n                    setShowImage(false);\n                }}\n                className={classes.imageContainer}\n            >\n                <div>\n                    <img className={classes.image} src={todo.image} alt=\"...\" />\n                </div>\n            </Modal>\n\n            {/* Edit Todo */}\n            <Dialog\n                open={open}\n                keepMounted\n                onClose={() => {\n                    setOpen(false);\n                }}\n            >\n                <Paper className={classes.dialog}>\n                    <DialogTitle>{\"Edit Todo\"}</DialogTitle>\n                    <DialogContent>\n                        <TextField\n                            className={classes.inputField}\n                            fullWidth\n                            value={editedText}\n                            onChange={(e) => {\n                                setEditedText(e.target.value);\n                            }}\n                            label=\"What you want to edit?\"\n                            variant=\"standard\"\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => {\n                                setOpen(false);\n                                setEditedText(todo.text);\n                            }}\n                            color=\"secondary\"\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                let temp = editedText.trim();\n                                if (temp.length !== 0) {\n                                    dispatch(editTodo(todo.id, temp));\n                                }\n                                setEditedText(todo.text);\n                                setOpen(false);\n                            }}\n                            color=\"inherit\"\n                        >\n                            Edit\n                        </Button>\n                    </DialogActions>\n                </Paper>\n            </Dialog>\n        </>\n    );\n};\n\nexport default Todo;\n","/** @format */\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    makeStyles,\n    Button,\n    Grid,\n    TextField,\n    IconButton,\n    Tooltip,\n} from \"@material-ui/core\";\n//actions\nimport { addTodo } from \"../../../actions/index.js\";\n//icons\nimport { PhotoCamera, Sort } from \"@material-ui/icons\";\n//components\nimport Todo from \"./Todo.js\";\n\nconst Alltab = ({ todos }) => {\n    //states\n    const [sort, setSort] = useState(false);\n    const [image, setImage] = useState(\"\");\n    const [inputValue, setInputValue] = useState(\"\");\n\n    //data from store\n    const dispatch = useDispatch();\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n\n    //dynamic styles\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            paddingTop: 20,\n            paddingLeft: 50,\n            paddingRight: 50,\n            color: darkMode ? \"white\" : \"\",\n            backgroundColor: darkMode ? \"black\" : \"\",\n        },\n        input: {\n            flexWrap: \"nowrap\",\n        },\n        \"@media (max-width: 959.95px)\": {\n            container: {\n                paddingLeft: 10,\n                paddingRight: 10,\n            },\n            todoList: {\n                padding: 0,\n                paddingTop: 10,\n            },\n            inputButton: {\n                maxWidth: 20,\n            },\n        },\n        inputField: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            marginRight: 25,\n            \"& label.Mui-focused\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInput-underline:after\": {\n                borderBottomColor: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiOutlinedInput-root\": {\n                \"& fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&:hover fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&.Mui-focused fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n            },\n            \"& .MuiInputLabel-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInputBase-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n        },\n        inputButton: {\n            maxWidth: 150,\n        },\n        todoContainer: {\n            marginTop: 30,\n        },\n        todoList: {\n            backgroundColor: darkMode ? \"#151515\" : \"\",\n            padding: 30,\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            todoList: {\n                padding: 0,\n                paddingTop: 10,\n            },\n            inputButton: {\n                maxWidth: 20,\n            },\n        },\n        sort: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        empty: {\n            marginTop: 60,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n        inputImage: {\n            display: \"none\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid className={classes.container} container direction=\"column\">\n                <Grid className={classes.input} container direction=\"row\">\n                    <input\n                        accept=\"image/*\"\n                        className={classes.inputImage}\n                        id=\"icon-button-file\"\n                        type=\"file\"\n                        onChange={(e) => {\n                            if (e.target.files[0] !== undefined) {\n                                setImage(\n                                    URL.createObjectURL(e.target.files[0])\n                                );\n                            }\n                        }}\n                    />\n                    <label htmlFor=\"icon-button-file\">\n                        <IconButton color=\"primary\" component=\"span\">\n                            <PhotoCamera />\n                        </IconButton>\n                    </label>\n                    <TextField\n                        className={classes.inputField}\n                        fullWidth\n                        value={inputValue}\n                        onChange={(e) => {\n                            setInputValue(e.target.value);\n                        }}\n                        label=\"What have you worked on?\"\n                        variant=\"outlined\"\n                    />\n                    <Button\n                        className={classes.inputButton}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            let temp = inputValue.trim();\n                            if (temp.length !== 0) {\n                                dispatch(addTodo(temp, image));\n                                setImage(\"\");\n                                setInputValue(\"\");\n                            }\n                        }}\n                    >\n                        Add\n                    </Button>\n                </Grid>\n                <Grid className={classes.todoContainer}>\n                    <div className={classes.sort}>\n                        <h4>ToDo Tasks</h4>\n                        <Tooltip title=\"Sort\" arrow>\n                            <IconButton\n                                edge=\"end\"\n                                size=\"medium\"\n                                color=\"inherit\"\n                                onClick={() => {\n                                    setSort(!sort);\n                                }}\n                            >\n                                <Sort />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    {todos.length !== 0 ? (\n                        <Grid\n                            className={classes.todoList}\n                            container\n                            direction=\"column\"\n                        >\n                            {sort\n                                ? [...todos].reverse().map((todo) => {\n                                      return <Todo todo={todo} key={todo.id} />;\n                                  })\n                                : todos.map((todo) => {\n                                      return <Todo todo={todo} key={todo.id} />;\n                                  })}\n                        </Grid>\n                    ) : (\n                        <div className={classes.empty}>\n                            <h2>Looks Empty Here!</h2>\n                            <h4>Add some Tasks..</h4>\n                        </div>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Alltab;\n","/** @format */\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    makeStyles,\n    Button,\n    Grid,\n    TextField,\n    IconButton,\n    Tooltip,\n} from \"@material-ui/core\";\n//actions\nimport { addTodo } from \"../../../actions/index.js\";\n//components\nimport Todo from \"./Todo.js\";\n//icons\nimport { PhotoCamera, Sort } from \"@material-ui/icons\";\n\nconst Activetab = ({ todos }) => {\n    //states\n    const [sort, setSort] = useState(false);\n    const [image, setImage] = useState(\"\");\n    const [inputValue, setInputValue] = useState(\"\");\n\n    //data from store\n    const dispatch = useDispatch();\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n\n    //dynamic styles\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            paddingTop: 20,\n            paddingLeft: 50,\n            paddingRight: 50,\n            color: darkMode ? \"white\" : \"white\",\n            backgroundColor: darkMode ? \"black\" : \"\",\n        },\n        input: {\n            flexWrap: \"nowrap\",\n        },\n        inputField: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            marginRight: 25,\n            \"& label.Mui-focused\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInput-underline:after\": {\n                borderBottomColor: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiOutlinedInput-root\": {\n                \"& fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&:hover fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&.Mui-focused fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n            },\n            \"& .MuiInputLabel-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInputBase-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n        },\n        inputButton: {\n            maxWidth: 150,\n        },\n        todoContainer: {\n            marginTop: 30,\n        },\n        todoList: {\n            backgroundColor: darkMode ? \"#151515\" : \"\",\n            padding: 30,\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            todoList: {\n                padding: 0,\n                paddingTop: 10,\n            },\n            inputButton: {\n                maxWidth: 20,\n            },\n            container: {\n                paddingLeft: 10,\n                paddingRight: 10,\n            },\n        },\n        sort: {\n            color: darkMode ? \"white\" : \"black\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        empty: {\n            color: darkMode ? \"white\" : \"black\",\n            marginTop: 60,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n        },\n        inputImage: {\n            display: \"none\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid className={classes.container} container direction=\"column\">\n                <Grid className={classes.input} container direction=\"row\">\n                    <input\n                        accept=\"image/*\"\n                        className={classes.inputImage}\n                        id=\"icon-button-file\"\n                        type=\"file\"\n                        onChange={(e) => {\n                            if (e.target.files[0] !== undefined) {\n                                setImage(\n                                    URL.createObjectURL(e.target.files[0])\n                                );\n                            }\n                        }}\n                    />\n                    <label htmlFor=\"icon-button-file\">\n                        <IconButton color=\"primary\" component=\"span\">\n                            <PhotoCamera />\n                        </IconButton>\n                    </label>\n                    <TextField\n                        className={classes.inputField}\n                        fullWidth\n                        value={inputValue}\n                        onChange={(e) => {\n                            setInputValue(e.target.value);\n                        }}\n                        label=\"What have you worked on?\"\n                        variant=\"outlined\"\n                    />\n                    <Button\n                        className={classes.inputButton}\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            let temp = inputValue.trim();\n                            if (temp.length !== 0) {\n                                dispatch(addTodo(temp, image));\n                                setImage(\"\");\n                                setInputValue(\"\");\n                            }\n                        }}\n                    >\n                        Add\n                    </Button>\n                </Grid>\n                <Grid className={classes.todoContainer}>\n                    <div className={classes.sort}>\n                        <h4>Active ToDo Tasks</h4>\n                        <Tooltip title=\"Sort\" arrow>\n                            <IconButton\n                                edge=\"end\"\n                                size=\"medium\"\n                                color=\"inherit\"\n                                onClick={() => {\n                                    setSort(!sort);\n                                }}\n                            >\n                                <Sort />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    {todos.length !== 0 ? (\n                        <Grid\n                            className={classes.todoList}\n                            container\n                            direction=\"column\"\n                        >\n                            {sort\n                                ? [...todos].reverse().map((todo) => {\n                                      if (!todo.completed) {\n                                          return (\n                                              <Todo todo={todo} key={todo.id} />\n                                          );\n                                      }\n                                  })\n                                : todos.map((todo) => {\n                                      if (!todo.completed) {\n                                          return (\n                                              <Todo todo={todo} key={todo.id} />\n                                          );\n                                      }\n                                  })}\n                        </Grid>\n                    ) : (\n                        <div className={classes.empty}>\n                            <h2>Looks Empty Here!</h2>\n                            <h4>Add some Tasks..</h4>\n                        </div>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Activetab;\n","/** @format */\n\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { makeStyles, Grid, IconButton, Tooltip } from \"@material-ui/core\";\n//components\nimport Todo from \"./Todo.js\";\n//icons\nimport { Sort } from \"@material-ui/icons\";\n\nconst Completedtab = ({ todos }) => {\n    //states\n    const [sort, setSort] = useState(false);\n\n    //data from store\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n\n    //dynamic styles\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            paddingTop: 20,\n            paddingLeft: 50,\n            paddingRight: 50,\n            color: darkMode ? \"white\" : \"white\",\n            backgroundColor: darkMode ? \"black\" : \"\",\n        },\n        input: {\n            flexWrap: \"nowrap\",\n        },\n        inputField: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            marginRight: 25,\n        },\n        inputButton: {\n            maxWidth: 150,\n        },\n        todoContainer: {\n            marginTop: 30,\n        },\n        todoList: {\n            backgroundColor: darkMode ? \"#151515\" : \"\",\n            padding: 30,\n        },\n        [theme.breakpoints.down(\"sm\")]: {\n            todoList: {\n                padding: 0,\n                paddingTop: 10,\n            },\n            container: {\n                paddingLeft: 10,\n                paddingRight: 10,\n            },\n        },\n        sort: {\n            color: darkMode ? \"white\" : \"black\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n        },\n        empty: {\n            color: darkMode ? \"white\" : \"black\",\n            marginTop: 116,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid className={classes.container} container direction=\"column\">\n                <Grid className={classes.todoContainer}>\n                    <div className={classes.sort}>\n                        <h4>Completed ToDo Tasks</h4>\n                        <Tooltip title=\"Sort\" arrow>\n                            <IconButton\n                                edge=\"end\"\n                                size=\"medium\"\n                                color=\"inherit\"\n                                onClick={() => {\n                                    setSort(!sort);\n                                }}\n                            >\n                                <Sort />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    {todos.length !== 0 ? (\n                        <Grid\n                            className={classes.todoList}\n                            container\n                            direction=\"column\"\n                        >\n                            {sort\n                                ? [...todos].reverse().map((todo) => {\n                                      if (todo.completed) {\n                                          return (\n                                              <Todo todo={todo} key={todo.id} />\n                                          );\n                                      }\n                                  })\n                                : todos.map((todo) => {\n                                      if (todo.completed) {\n                                          return (\n                                              <Todo todo={todo} key={todo.id} />\n                                          );\n                                      }\n                                  })}\n                        </Grid>\n                    ) : (\n                        <div className={classes.empty}>\n                            <h2>Looks Empty Here!</h2>\n                            <h4>Add some Tasks..</h4>\n                        </div>\n                    )}\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Completedtab;\n","/** @format */\n\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n    makeStyles,\n    Paper,\n    Tabs,\n    Tab,\n    Box,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n    TextField,\n} from \"@material-ui/core\";\n//components\nimport Alltab from \"./components/Alltab\";\nimport Activetab from \"./components/Activetab\";\nimport Completedtab from \"./components/Completedtab\";\nimport Todo from \"./components/Todo\";\n\nconst TabPanel = (props) => {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`scrollable-auto-tabpanel-${index}`}\n            aria-labelledby={`scrollable-auto-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box>{children}</Box>}\n        </div>\n    );\n};\n\nconst Index = ({ handleCloseSearch, openSearch }) => {\n    //states\n    const [value, setValue] = useState(0);\n    const [search, setSearch] = useState(\"\");\n\n    //data from store\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n    const todos = useSelector((state) => {\n        return state.todoReducer.todos;\n    });\n\n    //dynamic styles\n    const useStyles = makeStyles({\n        root: {\n            flexGrow: 1,\n            borderRadius: 0,\n            backgroundColor: darkMode ? \"black\" : \"white\",\n            color: darkMode ? \"white\" : \"black\",\n        },\n        inputField: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            marginTop: 10,\n            \"& label.Mui-focused\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInput-underline:after\": {\n                borderBottomColor: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiOutlinedInput-root\": {\n                \"& fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&:hover fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n                \"&.Mui-focused fieldset\": {\n                    borderColor: darkMode ? \"white\" : \"\",\n                },\n            },\n            \"& .MuiInputLabel-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n            \"& .MuiInputBase-root\": {\n                color: darkMode ? \"white\" : \"\",\n            },\n        },\n        search: {\n            color: darkMode ? \"white\" : \"\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n        },\n        tab: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            color: darkMode ? \"white\" : \"black\",\n        },\n        dialog: {\n            backgroundColor: darkMode ? \"#1f1f1f\" : \"\",\n            color: darkMode ? \"white\" : \"\",\n        },\n    });\n\n    const classes = useStyles();\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    return (\n        <>\n            <Paper className={classes.root}>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    centered\n                    indicatorColor=\"primary\"\n                    className={classes.tabs}\n                >\n                    <Tab className={classes.tab} label=\"All\" />\n                    <Tab className={classes.tab} label=\"Active\" />\n                    <Tab className={classes.tab} label=\"Completed\" />\n                </Tabs>\n            </Paper>\n            <TabPanel value={value} index={0}>\n                <Alltab todos={todos} />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n                <Activetab todos={todos} />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <Completedtab todos={todos} />\n            </TabPanel>\n\n            {/* Search Dialog */}\n            <Dialog\n                maxWidth={\"md\"}\n                open={openSearch}\n                scroll=\"paper\"\n                onClose={handleCloseSearch}\n                aria-labelledby=\"max-width-dialog-title\"\n            >\n                <Paper className={classes.dialog}>\n                    <DialogTitle id=\"max-width-dialog-title\">\n                        Search Todos\n                        <TextField\n                            className={classes.inputField}\n                            fullWidth\n                            label=\"What you want to search?\"\n                            variant=\"outlined\"\n                            value={search}\n                            onChange={(e) => {\n                                setSearch(e.target.value);\n                            }}\n                        />\n                    </DialogTitle>\n                    <DialogContent dividers=\"paper\">\n                        <DialogContentText\n                            id=\"scroll-dialog-description\"\n                            tabIndex={-1}\n                        >\n                            {todos.length !== 0 ? (\n                                todos.map((todo) => {\n                                    if (\n                                        !todo.text\n                                            .toLowerCase()\n                                            .search(search.toLowerCase())\n                                    ) {\n                                        return (\n                                            <Todo todo={todo} key={todo.id} />\n                                        );\n                                    }\n                                })\n                            ) : (\n                                <div className={classes.search}>\n                                    <h3>Nothing to search for!</h3>\n                                </div>\n                            )}\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseSearch} color=\"inherit\">\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Paper>\n            </Dialog>\n        </>\n    );\n};\n\nexport default Index;\n","/** @format */\n\nexport const changeTheme = () => {\n    return {\n        type: \"CHANGE_THEME\",\n    };\n};\n\nexport const addTodo = (text, image) => {\n    return {\n        type: \"ADD_TODO\",\n        payload: { text: text, completed: false, image: image },\n    };\n};\n\nexport const completeTodo = (id) => {\n    return {\n        type: \"COMPLETE_TODO\",\n        payload: { id: id },\n    };\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: \"DELETE_TODO\",\n        payload: { id: id },\n    };\n};\n\nexport const editTodo = (id, text) => {\n    return {\n        type: \"EDIT_TODO\",\n        payload: { id: id, text: text },\n    };\n};\n\nexport const deleteSnack = (data) => {\n    return {\n        type: \"DELETE_SNACK\",\n        payload: data,\n    };\n};\n\nexport const activeSnack = (data) => {\n    return {\n        type: \"ACTIVE_SNACK\",\n        payload: data,\n    };\n};\n\nexport const completeSnack = (data) => {\n    return {\n        type: \"COMPLETE_SNACK\",\n        payload: data,\n    };\n};\n"],"sourceRoot":""}