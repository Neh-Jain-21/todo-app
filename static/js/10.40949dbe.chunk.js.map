{"version":3,"sources":["components/Snacks.js","actions/index.js"],"names":["Snacks","dispatch","useDispatch","snacks","useSelector","state","snackReducer","anchorOrigin","vertical","horizontal","open","activeSnack","autoHideDuration","onClose","message","action","size","color","onClick","fontSize","completedSnack","completeSnack","deletedSnack","deleteSnack","changeTheme","type","addTodo","text","image","payload","completed","completeTodo","id","deleteTodo","editTodo","data"],"mappings":"uHAAA,6DAyGeA,UAhGA,WACX,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GACxB,OAAOA,EAAMC,gBAGjB,OACI,qCAEI,cAAC,IAAD,CACIC,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,KAAMP,EAAOQ,YACbC,iBAAkB,IAClBC,QAAS,WACLZ,EAASU,aAAY,KAEzBG,QAAQ,iBACRC,OACI,mCACI,cAAC,IAAD,CACIC,KAAK,QACL,aAAW,QACXC,MAAM,UACNC,QAAS,WACLjB,EAASU,aAAY,KAL7B,SAQI,cAAC,IAAD,CAAOQ,SAAS,gBAOhC,cAAC,IAAD,CACIZ,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,KAAMP,EAAOiB,eACbR,iBAAkB,IAClBC,QAAS,WACLZ,EAASA,EAASoB,aAAc,MAEpCP,QAAQ,iBACRC,OACI,mCACI,cAAC,IAAD,CACIC,KAAK,QACL,aAAW,QACXC,MAAM,UACNC,QAAS,WACLjB,EAASA,EAASoB,aAAc,MALxC,SAQI,cAAC,IAAD,CAAOF,SAAS,gBAOhC,cAAC,IAAD,CACIZ,aAAc,CACVC,SAAU,SACVC,WAAY,QAEhBC,KAAMP,EAAOmB,aACbV,iBAAkB,IAClBC,QAAS,WACLZ,EAASsB,aAAY,KAEzBT,QAAQ,eACRC,OACI,mCACI,cAAC,IAAD,CACIC,KAAK,QACL,aAAW,QACXC,MAAM,UACNC,QAAS,WACLjB,EAASsB,aAAY,KAL7B,SAQI,cAAC,IAAD,CAAOJ,SAAS,qB,gCChG5C,gRAEO,IAAMK,EAAc,WACvB,MAAO,CACHC,KAAM,iBAIDC,EAAU,SAACC,EAAMC,GAC1B,MAAO,CACHH,KAAM,WACNI,QAAS,CAAEF,KAAMA,EAAMG,WAAW,EAAOF,MAAOA,KAI3CG,EAAe,SAACC,GACzB,MAAO,CACHP,KAAM,gBACNI,QAAS,CAAEG,GAAIA,KAIVC,EAAa,SAACD,GACvB,MAAO,CACHP,KAAM,cACNI,QAAS,CAAEG,GAAIA,KAIVE,EAAW,SAACF,EAAIL,GACzB,MAAO,CACHF,KAAM,YACNI,QAAS,CAAEG,GAAIA,EAAIL,KAAMA,KAIpBJ,EAAc,SAACY,GACxB,MAAO,CACHV,KAAM,eACNI,QAASM,IAIJxB,EAAc,SAACwB,GACxB,MAAO,CACHV,KAAM,eACNI,QAASM,IAIJd,EAAgB,SAACc,GAC1B,MAAO,CACHV,KAAM,iBACNI,QAASM","file":"static/js/10.40949dbe.chunk.js","sourcesContent":["/** @format */\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IconButton, Snackbar } from \"@material-ui/core\";\n//actions\nimport { activeSnack, completeSnack, deleteSnack } from \"../actions\";\n//icons\nimport { Close } from \"@material-ui/icons\";\n\nconst Snacks = () => {\n    const dispatch = useDispatch();\n\n    const snacks = useSelector((state) => {\n        return state.snackReducer;\n    });\n\n    return (\n        <>\n            {/* Active SB */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\",\n                }}\n                open={snacks.activeSnack}\n                autoHideDuration={6000}\n                onClose={() => {\n                    dispatch(activeSnack(false));\n                }}\n                message=\"Todo Activated\"\n                action={\n                    <>\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                dispatch(activeSnack(false));\n                            }}\n                        >\n                            <Close fontSize=\"small\" />\n                        </IconButton>\n                    </>\n                }\n            />\n\n            {/* completed SB */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\",\n                }}\n                open={snacks.completedSnack}\n                autoHideDuration={6000}\n                onClose={() => {\n                    dispatch(dispatch(completeSnack(false)));\n                }}\n                message=\"Todo Completed\"\n                action={\n                    <>\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                dispatch(dispatch(completeSnack(false)));\n                            }}\n                        >\n                            <Close fontSize=\"small\" />\n                        </IconButton>\n                    </>\n                }\n            />\n\n            {/* Deleted SB */}\n            <Snackbar\n                anchorOrigin={{\n                    vertical: \"bottom\",\n                    horizontal: \"left\",\n                }}\n                open={snacks.deletedSnack}\n                autoHideDuration={6000}\n                onClose={() => {\n                    dispatch(deleteSnack(false));\n                }}\n                message=\"Todo Deleted\"\n                action={\n                    <>\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            onClick={() => {\n                                dispatch(deleteSnack(false));\n                            }}\n                        >\n                            <Close fontSize=\"small\" />\n                        </IconButton>\n                    </>\n                }\n            />\n        </>\n    );\n};\n\nexport default Snacks;\n","/** @format */\n\nexport const changeTheme = () => {\n    return {\n        type: \"CHANGE_THEME\",\n    };\n};\n\nexport const addTodo = (text, image) => {\n    return {\n        type: \"ADD_TODO\",\n        payload: { text: text, completed: false, image: image },\n    };\n};\n\nexport const completeTodo = (id) => {\n    return {\n        type: \"COMPLETE_TODO\",\n        payload: { id: id },\n    };\n};\n\nexport const deleteTodo = (id) => {\n    return {\n        type: \"DELETE_TODO\",\n        payload: { id: id },\n    };\n};\n\nexport const editTodo = (id, text) => {\n    return {\n        type: \"EDIT_TODO\",\n        payload: { id: id, text: text },\n    };\n};\n\nexport const deleteSnack = (data) => {\n    return {\n        type: \"DELETE_SNACK\",\n        payload: data,\n    };\n};\n\nexport const activeSnack = (data) => {\n    return {\n        type: \"ACTIVE_SNACK\",\n        payload: data,\n    };\n};\n\nexport const completeSnack = (data) => {\n    return {\n        type: \"COMPLETE_SNACK\",\n        payload: data,\n    };\n};\n"],"sourceRoot":""}