{"version":3,"sources":["App.js","reducers/themeReducer.js","reducers/todoReducer.js","reducers/snackReducer.js","reducers/index.js","store.js","index.js"],"names":["Navbar","lazy","Heading","Tabs","Snacks","App","useState","openSearch","setOpenSearch","darkMode","useSelector","state","themeReducer","document","body","style","backgroundColor","fallback","color","loading","css","handleOpenSearch","handleCloseSearch","initState","action","type","todos","id","todoReducer","text","payload","completed","image","filter","todo","URL","revokeObjectURL","map","t","deletedSnack","completedSnack","activeSnack","snackReducer","rootReducer","combineReducers","store","createStore","ReactDOM","render","getElementById"],"mappings":"mNAQMA,EAASC,gBAAK,kBAAM,qEACpBC,EAAUD,gBAAK,kBAAM,uDACrBE,EAAOF,gBAAK,kBAAM,sEAClBG,EAASH,gBAAK,kBAAM,sEAoDXI,EAlDH,WAER,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAGMC,EAAWC,aAAY,SAACC,GAC1B,OAAOA,EAAMC,aAAaH,YAK1BI,SAASC,KAAKC,MAAMC,gBADpBP,EACsC,QAEA,QAY1C,OACI,cAAC,WAAD,CACIQ,SACI,cAAC,aAAD,CACIC,MAAO,UACPC,SAAS,EACTC,IACI,qFANhB,SAWI,qCACI,cAACpB,EAAD,CAAQqB,iBArBK,WACrBb,GAAc,MAqBN,cAACN,EAAD,IACA,cAACC,EAAD,CACII,WAAYA,EACZe,kBArBU,WACtBd,GAAc,MAsBN,cAACJ,EAAD,U,QCvDVmB,EAAY,CACdd,UAAU,GAeCG,EAZM,WAAgC,IAA/BD,EAA8B,uDAAtBY,EAAWC,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,eACD,MAAO,CACHhB,UAAWE,EAAMF,UAGzB,QACI,OAAOE,I,OCZbY,EAAY,CACdG,MAAO,IAGPC,EAAK,EA2DMC,EAzDK,WAAgC,IAA/BjB,EAA8B,uDAAtBY,EAAWC,EAAW,uCAC/C,OAAQA,EAAOC,MACX,IAAK,WAED,OADAE,IACO,CACHD,MAAM,GAAD,mBACEf,EAAMe,OADR,CAED,CACIC,GAAIA,EACJE,KAAML,EAAOM,QAAQD,KACrBE,WAAW,EACXC,MAAOR,EAAOM,QAAQE,UAKtC,IAAK,cACD,MAAO,CACHN,MAAM,YACCf,EAAMe,MAAMO,QAAO,SAACC,GAInB,OAHIA,EAAKP,KAAOH,EAAOM,QAAQH,IAC3BQ,IAAIC,gBAAgBF,EAAKF,OAEtBE,EAAKP,KAAOH,EAAOM,QAAQH,QAKlD,IAAK,YAMD,OALAhB,EAAMe,MAAMW,KAAI,SAACC,GACTA,EAAEX,KAAOH,EAAOM,QAAQH,KACxBW,EAAET,KAAOL,EAAOM,QAAQD,SAGzB,CACHH,MAAM,YAAKf,EAAMe,QAGzB,IAAK,gBAUD,OATAf,EAAMe,MAAMW,KAAI,SAACC,GACTA,EAAEX,KAAOH,EAAOM,QAAQH,MACJ,IAAhBW,EAAEP,UACFO,EAAEP,WAAY,EAEdO,EAAEP,WAAY,MAInB,CACHL,MAAM,YAAKf,EAAMe,QAGzB,QACI,OAAOf,IC3DbY,EAAY,CACdgB,cAAc,EACdC,gBAAgB,EAChBC,aAAa,GAyBFC,EAtBM,WAAgC,IAA/B/B,EAA8B,uDAAtBY,EAAWC,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,eACD,MAAO,CACHc,aAAcf,EAAOM,SAG7B,IAAK,eACD,MAAO,CACHW,YAAajB,EAAOM,SAG5B,IAAK,iBACD,MAAO,CACHU,eAAgBhB,EAAOM,SAG/B,QACI,OAAOnB,ICbJgC,EANKC,YAAgB,CAChChC,eACAgB,cACAc,iBCHWG,EAFDC,YAAYH,GCG1BI,IAASC,OACL,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJhC,SAASoC,eAAe,W","file":"static/js/main.f1025341.chunk.js","sourcesContent":["/** @format */\n\nimport { useState, lazy, Suspense } from \"react\";\nimport { HashLoader } from \"react-spinners\";\nimport { useSelector } from \"react-redux\";\n//css\nimport \"./App.css\";\n//components\nconst Navbar = lazy(() => import(\"./components/Navbar\"));\nconst Heading = lazy(() => import(\"./components/Heading\"));\nconst Tabs = lazy(() => import(\"./components/Tabs/index\"));\nconst Snacks = lazy(() => import(\"./components/Snacks\"));\n\nconst App = () => {\n    //states\n    const [openSearch, setOpenSearch] = useState(false);\n\n    //from redux store\n    const darkMode = useSelector((state) => {\n        return state.themeReducer.darkMode;\n    });\n\n    //change body color\n    if (darkMode) {\n        document.body.style.backgroundColor = \"black\";\n    } else {\n        document.body.style.backgroundColor = \"white\";\n    }\n\n    //for search bar\n    const handleOpenSearch = () => {\n        setOpenSearch(true);\n    };\n\n    const handleCloseSearch = () => {\n        setOpenSearch(false);\n    };\n\n    return (\n        <Suspense\n            fallback={\n                <HashLoader\n                    color={\"#3656D7\"}\n                    loading={true}\n                    css={\n                        \"display:flex;height:100vh;flex-direction:row;align-items:center;margin-left:45%;\"\n                    }\n                />\n            }\n        >\n            <>\n                <Navbar handleOpenSearch={handleOpenSearch} />\n                <Heading />\n                <Tabs\n                    openSearch={openSearch}\n                    handleCloseSearch={handleCloseSearch}\n                />\n                <Snacks />\n            </>\n        </Suspense>\n    );\n};\n\nexport default App;\n","/** @format */\n\nconst initState = {\n    darkMode: false,\n};\n\nconst themeReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"CHANGE_THEME\":\n            return {\n                darkMode: !state.darkMode,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default themeReducer;\n","/** @format */\n\nconst initState = {\n    todos: [],\n};\n\nlet id = 2;\n\nconst todoReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"ADD_TODO\":\n            id++;\n            return {\n                todos: [\n                    ...state.todos,\n                    {\n                        id: id,\n                        text: action.payload.text,\n                        completed: false,\n                        image: action.payload.image,\n                    },\n                ],\n            };\n\n        case \"DELETE_TODO\":\n            return {\n                todos: [\n                    ...state.todos.filter((todo) => {\n                        if (todo.id === action.payload.id) {\n                            URL.revokeObjectURL(todo.image);\n                        }\n                        return todo.id !== action.payload.id;\n                    }),\n                ],\n            };\n\n        case \"EDIT_TODO\":\n            state.todos.map((t) => {\n                if (t.id === action.payload.id) {\n                    t.text = action.payload.text;\n                }\n            });\n            return {\n                todos: [...state.todos],\n            };\n\n        case \"COMPLETE_TODO\":\n            state.todos.map((t) => {\n                if (t.id === action.payload.id) {\n                    if (t.completed === false) {\n                        t.completed = true;\n                    } else {\n                        t.completed = false;\n                    }\n                }\n            });\n            return {\n                todos: [...state.todos],\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default todoReducer;\n","/** @format */\n\nconst initState = {\n    deletedSnack: false,\n    completedSnack: false,\n    activeSnack: false,\n};\n\nconst snackReducer = (state = initState, action) => {\n    switch (action.type) {\n        case \"DELETE_SNACK\":\n            return {\n                deletedSnack: action.payload,\n            };\n\n        case \"ACTIVE_SNACK\":\n            return {\n                activeSnack: action.payload,\n            };\n\n        case \"COMPLETE_SNACK\":\n            return {\n                completedSnack: action.payload,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default snackReducer;\n","/** @format */\n\nimport { combineReducers } from \"redux\";\nimport themeReducer from \"./themeReducer\";\nimport todoReducer from \"./todoReducer\";\nimport snackReducer from \"./snackReducer\";\n\nconst rootReducer = combineReducers({\n    themeReducer,\n    todoReducer,\n    snackReducer,\n});\n\nexport default rootReducer;\n","/** @format */\n\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}